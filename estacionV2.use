model ferrocarriles

abstract class ComponenteDeRed
 attributes
    nTrenes:Integer
 operations
    -- Actualizamos correctamente el valor de la variable nTrenes
    actualizaTrenes()
        begin
            self.nTrenes:= self.tren->size();
        end
    pre: true
    post: true
end

class Tren
 attributes
    posicion:String
 operations
    -- Se modifica el atributo posicion al correspondiente dependiendo del movimiento del tren
    actualizaPosicion()
        begin 
            declare t : Tramo;
            if self.posicionTren.oclIsTypeOf(Estacion)
            then self.posicion:=self.posicionTren.oclAsType(Estacion).nombre;
            else    t:=self.posicionTren.oclAsType(Tramo);
                    self.posicion:=(((t.viaInter->asBag())->
                    union(t.viau->asBag()))->union(t.viap->asBag()))->
                    any(true).nombre;
            end;
        end
        -- PRE: La variable posicionTren debe tener un valor
        pre: not self.posicionTren.oclIsUndefined
        post: true
    -- Mueve el tren de oeste a este
    meMuevo()
        begin 
            declare t : Tramo, e : Estacion;
            if self.posicionTren.oclIsTypeOf(Estacion)
            then e:=self.posicionTren.oclAsType(Estacion);
                 e.saleTren(self);
                 e.viaEste.primero.entraTren(self);
            else  t:=self.posicionTren.oclAsType(Tramo);
                  t.saleTren(self);
                  if t.viau.oclIsUndefined()
                  then t.teste.entraTren(self);
                  else t.viau.estacionEste.entraTren(self);
                  end;
            end;
            self.actualizaPosicion()
        end
        pre: true
        post: true
end

class Tramo < ComponenteDeRed
 operations
    -- Se modela la entrada de un tren t al tramo
    entraTren(t:Tren)
        begin
            insert(t,self) into ComponenteTren;
            self.actualizaTrenes();
            if not self.viap.oclIsUndefined()
            then self.viap.actualizaTrenes()
            end;
        end
        -- PRE: No debe haber ningun tren en el tramo
        pre: self.nTrenes=0
        -- POST: Sólo hay un tren en el tramo y ese tren es t
        post: self.nTrenes=1 and self.tren->includes(t)

    -- Se modela la salida de un tren t al tramo
    saleTren(t:Tren)
        begin
            delete(t,self) from ComponenteTren;
            self.actualizaTrenes();
            if not self.viau.oclIsUndefined()
            then self.viau.actualizaTrenes()
            end;
        end
        -- PRE: Sólo hay un tren en el tramo, que es t y
        -- si hay un tramo al este, entonces el numero de trenes en el mismo debe ser cero.
        pre: self.nTrenes=1 and self.tren->includes(t) and if not self.teste.oclIsUndefined() 
        then self.teste.nTrenes=0 
        else true
        endif
        -- POST: El numero de trenes en el tramo es cero y no se incluye ya a t.
        post: self.nTrenes=0 and self.tren->excludes(t)
end

class Estacion < ComponenteDeRed
    attributes
        nombre:String
    operations
        -- Se modela la entrada del tren t a la estacion
        entraTren(t:Tren)
            begin
                insert(t,self) into ComponenteTren;
                self.actualizaTrenes();
                self.actSiguienteEnSalir()
            end
            -- PRE: En la estacion no se encuentra el tren t
            pre: self.tren->excludes(t)
            -- POST: En la estacion se encuentra el tren y ahora hay un tren mas en la estacion
            post: self.tren->includes(t) and self.nTrenes-1=self.nTrenes@pre

        -- Se modela la salida del tren t de la estacion
        saleTren(t:Tren)
            begin
                delete(t,self) from ComponenteTren;
                self.actualizaTrenes();
                self.actSiguienteEnSalir()
            end
            -- PRE: El tren t se encuentra en la estacion y
            -- hay al menos un tren en la estacion y
            -- t es el siguiente tren en salir de la estacion y
            -- no hay ningun tren en el primer tramo de la via este
            pre: self.tren->includes(t) and self.nTrenes>0 and self.sigSalir=t and self.viaEste.primero.nTrenes=0
            -- POST: Hay un tren menos en la estacion y ya no se incluye t en los trenes de la estacion
            post: self.nTrenes+1=self.nTrenes@pre and self.tren->excludes(t)

        -- Se actualiza el siguiente tren en la relacion que debe salir de la estacion 
        actSiguienteEnSalir()
            begin
                if self.sigSalir->size()>0  
                then if self.tren->isEmpty()
                    then delete(self.sigSalir,self) from SalirEstacion;
                    else if self.tren->first()<>self.sigSalir
                         then delete(self.sigSalir,self) from SalirEstacion;
                         insert(self.tren->first(),self) into SalirEstacion;
                        end;
                    end;
                else if self.tren->size()>0
                    then insert(self.tren->first(),self) into SalirEstacion;
                    end;
                end;
            end
            pre: true
            -- POST: No hay ningun tren en la estacion y por lo tanto no se ha definido el siguiente en salir o
            -- el primer tren en la lista es el siguiente en salir.
            post: (self.tren->size()=0 and self.sigSalir.oclIsUndefined()) or (self.tren->first()=self.sigSalir)
end

class Via
 attributes
    nTrenes:Integer
    nombre:String
  operations
    -- Actualizamos correctamente el valor de la variable nTrenes
    actualizaTrenes()
        begin
            if(self.inter.oclIsUndefined())
            then self.nTrenes:= self.primero.nTrenes+self.ultimo.nTrenes;
            else self.nTrenes:= self.primero.nTrenes+self.ultimo.nTrenes+self.inter.nTrenes;
            end;
        end
    pre: true
    post: true
end

association Conexion between
    Tramo[0..1] role teste
    Tramo[0..1] role toeste
end 

association SalirEstacion between
    Tren[0..1] role sigSalir
    Estacion[0..1] role estacion
end

association EsteViaEstacion between
    Via[1] role viaEste
    Estacion[1] role estacionOeste
end 

association OesteViaEstacion between
    Via[1] role viaOeste
    Estacion[1] role estacionEste
end 

association ComponenteTren between
    Tren[*] role tren ordered
    ComponenteDeRed[1] role posicionTren
end 

composition primerTramoVia between
    Via[0..1] role viap
    Tramo[1] role primero
end

composition interTramoVia between
    Via[0..1] role viaInter
    Tramo[0..1] role inter
end

composition ultimoTramoVia between
    Via[0..1] role viau
    Tramo[1] role ultimo
end

constraints
    
-- CONDICIONES DEL ENUNCIADO

-- PROPIEDADES SOBRE LA ESTRUCTURA DE RED

-- a) Cada estacion tiene una via al este y una via al oeste
-- Esta especificada en el modello

-- b) Cada via conecta dos estaciones diferentes
context Via inv conexionDiferente:
    not(self.estacionOeste.oclIsUndefined()) and not(self.estacionEste.oclIsUndefined()) and
    self.estacionOeste <> self.estacionEste

-- c) Cada via tiene un unico primer tramo y un unico ultimo tramo, yendo de este a oeste
-- La unicidad se especifica en la relacion
context Via inv tramosPrimeroUltimo:
    if (self.inter.oclIsUndefined())
    then 
        self.primero.teste = self.ultimo and
        self.ultimo.toeste = self.primero
    else 
        self.primero.teste = self.inter and
        self.inter.teste = self.ultimo and
        self.ultimo.toeste = self.inter and
        self.inter.toeste = self.primero
    endif

-- d) Cada tramo, salvo el primero, tiene un tramo al oeste, y cada tramo, salvo el ultimo tiene un tramo al este         
context Tramo inv unTramo:
    (if self.viap->size()>0
    then
        true
    else
        self.toeste->size()=1
    endif)
    and 
    (if self.viau->size()>0
    then
        true
    else
        self.teste->size()=1
    endif)

--e) Cada via puede tener, a lo sumo, un tramo intermedio que se conecta al oeste con el primer
--tramo de la via y al este con el ultimo.
context Via inv oesteEsteTramo:
    if self.inter.oclIsUndefined()
    then true
    else self.inter.teste=self.ultimo and self.inter.toeste=self.primero and self.inter->size()=1
    endif

--f ) Cada Tramo es de una via
context Tramo inv alMenosUnaVia:
    (((self.viaInter->asBag())->union(self.viau->asBag()))->union(self.viap->asBag()))->size()=1

    
-- PROPIEDADES SOBRE LOS ATRIBUTOS DEL SISTEMA

-- a) Todas las vias tienen nombres diferentes
context Via inv nombresViasDiferentes:
    Via.allInstances()->select(v:Via | v<>self and v.nombre = self.nombre)->size()=0

-- b) Todas las estaciones tienen nombres diferentes
context Estacion inv nombresEstacionDistintos:
    Estacion.allInstances()->select(e:Estacion | e<>self and e.nombre = self.nombre)->size()=0

-- c) En cada estacion nTrenes coincide con el numero de trenes en la estacion
context Estacion inv nTrenesCorrecto:
    self.nTrenes = self.tren->size()

-- d) En cada tramo, hay a lo sumo un tren
context Tramo inv unTren:
    self.tren->size()<=1

-- e) En cada tramo, nTrenes coincide con el numero de trenes en cada tramo
context Tramo inv nTrenesCorrectoTramo:
    self.nTrenes = self.tren->size()

-- f) En cada via, nTrenes, coincide con el numero de trenes en esa via
context Via inv nTrenesCorrectoVia:
    if self.inter.oclIsUndefined()
    then
        self.nTrenes = self.ultimo.nTrenes + self.primero.nTrenes
    else
        self.nTrenes =  self.ultimo.nTrenes + self.inter.nTrenes + self.primero.nTrenes
    endif

-- g) Cada tren esta en una estacion o en un tramo de via pero no en los dos simultaneamente
context Tren inv estacionOTramo:
    self.posicionTren->size()=1

--h) La posicion de cada tren coincide o bien con el nombre de la estacion en la que en cuentra, o bien con el nombre de la via del tramo en el que se encuentra.
context Tren inv posicionIgualNombre:
let com: ComponenteDeRed=self.posicionTren in 
    if com.oclIsTypeOf(Estacion)
    then (com.oclAsType(Estacion)).nombre = self.posicion
    else let comVia: Tramo= com.oclAsType(Tramo) in 
        (((comVia.viaInter->asBag())->union(comVia.viau->asBag()))->union(comVia.viap->asBag()))->asSequence()->first().nombre = self.posicion
    endif


-- INVARIANTE DE LA SEGUNDA FASE

-- Invariante: en una estacion el tren siguiente en salir es uno de los trenes (el primero de la relacion ordenada) de la estacion
context Estacion inv sigEnSalir:
    (self.tren->size()=0 and self.sigSalir.oclIsUndefined()) or (self.tren->first()=self.sigSalir)